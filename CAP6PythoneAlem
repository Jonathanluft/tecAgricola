"""
Registro de Colheita com ALERTA de estoque m√≠nimo.

‚Ä¢ Registra ENTRADA (colheita) e SA√çDA (venda/retirada).
‚Ä¢ Mant√©m hist√≥rico em colheitas.json.
‚Ä¢ Opcional: grava tudo em um banco Oracle (preencha as credenciais).
‚Ä¢ Avisa quando o saldo de um produto fica abaixo do limite definido.
"""

import json, os, sys
from datetime import date
from typing import List, Dict

# ----------- CONFIG ORACLE (opcional) ----------- #
ORACLE_USER = "system"          # üñäÔ∏è  edite se necess√°rio
ORACLE_PASS = "oraclepw"
ORACLE_DSN  = "localhost/XEPDB1"
# ------------------------------------------------ #

# ----------- CONFIG ALERTA DE ESTOQUE ----------- #
# Defina o m√≠nimo aceit√°vel em kg para cada produto
ESTOQUE_MIN = {
    "Alface": 10,
    "Tomate": 20,
    "Cenoura": 15
}
# ------------------------------------------------ #

JSON_FILE = "colheitas.json"
TXT_FILE  = "boas_praticas.txt"
CAMPOS    = ("DATA", "TIPO", "QTD_KG", "PRECO_KG", "OPERACAO")  # tupla

# -------------- UTILIDADES JSON -------------- #
def ler_json() -> List[Dict]:
    if not os.path.exists(JSON_FILE):
        return []
    with open(JSON_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def salvar_json(dados: List[Dict]):
    with open(JSON_FILE, "w", encoding="utf-8") as f:
        json.dump(dados, f, ensure_ascii=False, indent=2)

# -------------- BANCO ORACLE (opcional) -------------- #
def inserir_oracle(reg: Dict):
    """Insere o registro no Oracle; se cx_Oracle faltar, apenas avisa."""
    try:
        import cx_Oracle
        conn = cx_Oracle.connect(ORACLE_USER, ORACLE_PASS, ORACLE_DSN, encoding="UTF-8")
        cur  = conn.cursor()
        cur.execute(
            """INSERT INTO COLHEITAS
               (DATA_C, TIPO, QUANTIDADE_KG, PRECO_KG, OPERACAO)
               VALUES (:1,:2,:3,:4,:5)""",
            (reg["DATA"], reg["TIPO"], reg["QTD_KG"], reg["PRECO_KG"], reg["OPERACAO"])
        )
        conn.commit()
        conn.close()
    except ModuleNotFoundError:
        print("‚ö†Ô∏è  cx_Oracle n√£o instalado ‚Äì pulando grava√ß√£o no banco.")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro Oracle: {e}")

# -------------- VALIDA√á√ÉO -------------- #
def validar_float(msg: str) -> float:
    while True:
        try:
            return float(input(msg).replace(",", "."))
        except ValueError:
            print("Digite n√∫mero v√°lido!")

# -------------- REGISTROS -------------- #
def registrar(operacao: str):
    """operacao = 'ENTRADA' ou 'SAIDA'."""
    tipo = input("Tipo (ex.: alface, tomate): ").strip().title()
    qtd  = validar_float("Quantidade (kg): ")
    preco= validar_float("Pre√ßo por kg (R$): ")
    reg  = {
        CAMPOS[0]: date.today().isoformat(),
        CAMPOS[1]: tipo,
        CAMPOS[2]: qtd,
        CAMPOS[3]: preco,
        CAMPOS[4]: operacao
    }
    dados = ler_json()
    dados.append(reg)
    salvar_json(dados)
    inserir_oracle(reg)
    print("‚úÖ Registro salvo!\n")
    verificar_alerta(tipo)  # checa estoque logo ap√≥s salvar

# -------------- RELAT√ìRIOS -------------- #
def saldo_atual() -> Dict[str, float]:
    dados = ler_json()
    tot: Dict[str, float] = {}
    for r in dados:
        sinal = 1 if r["OPERACAO"] == "ENTRADA" else -1
        tot[r["TIPO"]] = tot.get(r["TIPO"], 0) + sinal * r["QTD_KG"]
    return tot

def listar_historico():
    dados = ler_json()
    if not dados:
        print("Sem registros ainda.\n")
        return
    print("\n--- HIST√ìRICO ---")
    for r in dados:
        sinal = "+" if r["OPERACAO"] == "ENTRADA" else "-"
        print(f"{r['DATA']} | {r['TIPO']:<10} | {sinal}{r['QTD_KG']:>6.2f} kg | "
              f"R$ {r['PRECO_KG']:>6.2f}")
    print()

def mostrar_saldo():
    sal = saldo_atual()
    if not sal:
        print("Sem registros ainda.\n")
        return
    print("\n--- SALDO (kg) ---")
    for t, q in sal.items():
        print(f"{t:<10}: {q:.2f}")
    print()

# -------------- ALERTA -------------- #
def verificar_alerta(tipo: str):
    sal = saldo_atual()
    minimo = ESTOQUE_MIN.get(tipo)
    if minimo is not None and sal.get(tipo, 0) < minimo:
        print(f"‚ö†Ô∏è  ALERTA: Estoque de {tipo} abaixo do m√≠nimo "
              f"({sal.get(tipo,0):.2f} kg < {minimo} kg)\n")

# -------------- MENU -------------- #
def mostrar_boas_praticas():
    if os.path.exists(TXT_FILE):
        with open(TXT_FILE, "r", encoding="utf-8") as f:
            print(f.read())
            print("---\n")

def menu():
    mostrar_boas_praticas()
    while True:
        print("1) Registrar ENTRADA (colheita)")
        print("2) Registrar SA√çDA (venda/retirada)")
        print("3) Listar hist√≥rico")
        print("4) Ver saldo")
        print("0) Sair")
        escolha = input("> ").strip()
        if escolha == "1":
            registrar("ENTRADA")
        elif escolha == "2":
            registrar("SAIDA")
        elif escolha == "3":
            listar_historico()
        elif escolha == "4":
            mostrar_saldo()
        elif escolha == "0":
            sys.exit()
        else:
            print("Op√ß√£o inv√°lida.\n")

if __name__ == "__main__":
    menu()

    
